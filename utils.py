import logging
import time
from deep_translator import GoogleTranslator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot_logs.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# –ö—ç—à –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
translation_cache = {}

def translate_text(text, dest_lang="ru"):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º deep-translator –∏ –∫—ç—à–∞"""
    if not text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç
        return text

    if text in translation_cache:
        return translation_cache[text]

    try:
        start_time = time.time()
        translated = GoogleTranslator(source="auto", target=dest_lang).translate(text)
        end_time = time.time()
        log_info(f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ '{text}' –∑–∞–Ω—è–ª {round(end_time - start_time, 2)} —Å–µ–∫—É–Ω–¥")
        translation_cache[text] = translated
        return translated
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ '{text}': {e}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def log_info(message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
    logging.info(message)

def log_error(error):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥"""
    logging.error(error)

def format_movie_info(movie):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –∞–∫—Ç—ë—Ä–∞–º–∏"""
    title_ru = translate_text(movie["title"])
    description_ru = translate_text(movie["description"])

    return (
        f"üé¨ {movie['title']} ({title_ru}) ({movie['release_year']})\n"
        f"üìå –ñ–∞–Ω—Ä: {movie['genre']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_ru}\n"
        f"üé≠ –ê–∫—Ç—ë—Ä—ã: {movie['actors']}"
    )
